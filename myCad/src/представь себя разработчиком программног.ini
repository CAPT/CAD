представь себя разработчиком программного обеспечения. нужно создать приложение с интерфейсом на reactjs,
 которое бы предлагало пользователю выбрать тип изделия, после выбора обращалось к базе данных, 

возвращало бы модели такого типа изделия. после выбором пользователем конкретной модели, 
обращалось бы к базе и возвращало необходимые параметры для модели


мне нужно написать сервер на nodejs, который будет принимать параметризированные  rest-запросы  и отправлять данные из mongodb, находящейся на сервере 92.22.22.22:27018 в виде json в ответ


User:
    login
    password
    
    recdatebegin
    recdateend
    is_active
    orders
    orders_link
    balance / cash
    discount

    referalProgram

Clothes:
    type

Clothes_types:
    id
    name
    link_to_variant (option)

    Variant (model):
    type_id
    id
    number of parts
    


Parts:
    variant/model_id
    dimensions [] 


    SELECT * FROM `wp_woocommerce_attribute_taxonomies`  --атрибуты

    SELECT * FROM `wp_posts`  -- все разделы и товары


представь, что тебе нужно расширить функционал магазина на woocommerce. 
Есть следующие типы товаров: бюстгальтеры, трусы, корсеты.
У каждого типа есть несколько разных моделей
Укаждой модели есть свой набор атрибутов, таких как обхват бедер, высота талии и прочие.
У трусов один набор атрибутов, у бюстгалтеров - другой, у корсетов - третий.
Нужно создать структуру хранения этих данных.

Также необходимо создать функционал, реализующий следующий сценарий:
При добавлении товара в корзину, система предлагает набор атрибутов, характерный для  этой модели выбранного типа.
Пользователь заполняет значения. Значения сохраняются в базу данных, а также отправляюся с помощью rest-запроса на 127.0.0.1/blueprint



function create_product_type_taxonomy() {
    $labels = array(
        'name'              => _x( 'Типы товаров', 'taxonomy general name', 'textdomain' ),
        'singular_name'     => _x( 'Тип товара', 'taxonomy singular name', 'textdomain' ),
        'search_items'      => __( 'Поиск типа товара', 'textdomain' ),
        'all_items'         => __( 'Все типы товаров', 'textdomain' ),
        'parent_item'       => __( 'Родительский тип товара', 'textdomain' ),
        'parent_item_colon' => __( 'Родительский тип товара:', 'textdomain' ),
        'edit_item'         => __( 'Редактировать тип товара', 'textdomain' ),
        'update_item'       => __( 'Обновить тип товара', 'textdomain' ),
        'add_new_item'      => __( 'Добавить новый тип товара', 'textdomain' ),
        'new_item_name'     => __( 'Новый тип товара', 'textdomain' ),
        'menu_name'         => __( 'Типы товаров', 'textdomain' ),
    );

    $args = array(
        'labels'            => $labels,
        'public'            => true,
        'show_in_nav_menus' => true,
        'show_admin_column' => true,
        'hierarchical'      => true,
        'show_tagcloud'     => true,
        'rewrite'           => array( 'slug' => 'product_type' ),
    );

    register_taxonomy( 'product_type', array( 'product' ), $args );
}
add_action( 'init', 'create_product_type_taxonomy', 0 );




// Создание таксономии для модели товара
function create_model_taxonomy() {
    $labels = array(
        'name'              => _x( 'Модели', 'taxonomy general name', 'textdomain' ),
        'singular_name'     => _x( 'Модель', 'taxonomy singular name', 'textdomain' ),
        'search_items'      => __( 'Поиск модели', 'textdomain' ),
        'all_items'         => __( 'Все модели', 'textdomain' ),
        'parent_item'       => __( 'Родительская модель', 'textdomain' ),
        'parent_item_colon' => __( 'Родительская модель:', 'textdomain' ),
        'edit_item'         => __( 'Редактировать модель', 'textdomain' ),
        'update_item'       => __( 'Обновить модель', 'textdomain' ),
        'add_new_item'      => __( 'Добавить новую модель', 'textdomain' ),
        'new_item_name'     => __( 'Новая модель', 'textdomain' ),
        'menu_name'         => __( 'Модели', 'textdomain' ),
    );

    $args = array(
        'labels'            => $labels,
        'public'            => true,
        'show_in_nav_menus' => true,
        'show_admin_column' => true,



        // Создаем таксономию для типов товаров
function create_product_type_taxonomy() {
    $labels = array(
        'name' => __('Типы товаров'),
        'singular_name' => __('Тип товара'),
        'search_items' => __('Найти тип товара'),
        'all_items' => __('Все типы товаров'),
        'parent_item' => __('Родительский тип товара'),
        'parent_item_colon' => __('Родительский тип товара:'),
        'edit_item' => __('Редактировать тип товара'),
        'update_item' => __('Обновить тип товара'),
        'add_new_item' => __('Добавить новый тип товара'),
        'new_item_name' => __('Название нового типа товара'),
        'menu_name' => __('Типы товаров')
    );
    register_taxonomy('product_type', 'product', array(
        'hierarchical' => true,
        'labels' => $labels,
        'show_ui' => true,
        'show_admin_column' => true,
        'query_var' => true,
        'rewrite' => array('slug' => 'product-type'),
    ));
}

add_action('init', 'create_product_type_taxonomy');

// Создаем таксономию для моделей товаров
function create_model_taxonomy() {
    $labels = array(
        'name' => __('Модели товаров'),
        'singular_name' => __('Модель товара'),
        'search_items' => __('Найти модель товара'),
        'all_items' => __('Все модели товаров'),
        'parent_item' => __('Родительская модель товара'),
        'parent_item_colon' => __('Родительская модель товара:'),
        'edit_item' => __('Редактировать модель товара'),
        'update_item' => __('Обновить модель товара'),
        'add_new_item' => __('Добавить новую модель товара'),
        'new_item_name' => __('Название новой модели товара'),
        'menu_name' => __('Модели товаров')
    );
    register_taxonomy('model', 'product', array(
        'hierarchical' => true,
        'labels' => $labels,
        'show_ui' => true,
        'show_admin_column' => true,
        'query_var' => true,
        'rewrite' => array('slug' => 'model'),
    ));
}

add_action('init', 'create_model_taxonomy');

// Создаем таксономию для атрибутов товаров
function create_attributes_taxonomy() {
    $labels = array(
        'name' => __('Атрибуты товаров'),
        'singular_name' => __('Атрибут товара'),
        'search_items' => __('Найти атрибут товара'),
        'all_items' => __('Все атрибуты товаров'),
        'parent_item' => __('Родительский атрибут товара'),
        'parent_item_colon' => __('Родительский атрибут товара:'),
        'edit_item' => __('Редактировать атрибут товара'),
        'update_item' => __('Обновить атрибут товара'),
       



       // Создание таксономии для типа товара
function create_product_type_taxonomy() {
  $labels = array(
    'name'              => _x( 'Типы товаров', 'taxonomy general name' ),
    'singular_name'     => _x( 'Тип товара', 'taxonomy singular name' ),
    'search_items'      => __( 'Найти тип товара' ),
    'all_items'         => __( 'Все типы товаров' ),
    'parent_item'       => __( 'Родительский тип товара' ),
    'parent_item_colon' => __( 'Родительский тип товара:' ),
    'edit_item'         => __( 'Редактировать тип товара' ),
    'update_item'       => __( 'Обновить тип товара' ),
    'add_new_item'      => __( 'Добавить новый тип товара' ),
    'new_item_name'     => __( 'Новое имя типа товара' ),
    'menu_name'         => __( 'Типы товаров' ),
  );

  $args = array(
    'labels'            => $labels,
    'public'            => true,
    'hierarchical'      => true,
    'show_ui'           => true,
    'show_admin_column' => true,
    'query_var'         => true,
    'rewrite'           => array( 'slug' => 'product_type' ),
  );

  register_taxonomy( 'product_type', array( 'product' ), $args );
}
add_action( 'init', 'create_product_type_taxonomy', 0 );

// Создание таксономии для моделей товаров
function create_model_taxonomy() {
  $labels = array(
    'name'              => _x( 'Модели товаров', 'taxonomy general name' ),
    'singular_name'     => _x( 'Модель товара', 'taxonomy singular name' ),
    'search_items'      => __( 'Найти модель товара' ),
    'all_items'         => __( 'Все модели товаров' ),
    'parent_item'       => __( 'Родительская модель товара' ),
    'parent_item_colon' => __( 'Родительская модель товара:' ),
    'edit_item'         => __( 'Редактировать модель товара' ),
    'update_item'       => __( 'Обновить модель товара' ),
    'add_new_item'      => __( 'Добавить новую модель товара' ),
    'new_item_name'     => __( 'Новое имя модели товара' ),
    'menu_name'         => __( 'Модели товаров' ),
  );е
  $args = array(
    'labels'            => $labels,
    'public'            => true,
    'hierarchical'      => true,
    'show_ui'           => true,
    'show_admin_column' => true,
    'query_var'         => true,
    'rewrite'           => array( 'slug' => 'model' ),
  );

  register_taxonomy


  сценарий, когда пользователь сначала указывает тип товара, потом выбирает содель, потом получает и заполняет значения атрибутов - все это динамически


  jQuery(document).ready(function($) {
  var productTypeSelect = $('#product_type_select');
  var modelSelect = $('#model_select');
  var attributesForm = $('#attributes_form');

  // Обработчик выбора типа товара
  productTypeSelect.on('change', function() {
    var productType = $(this).val();

    // Загрузка соответствующих моделей товаров
    $.ajax({
      url: '/wp-admin/admin-ajax.php',
      type: 'POST',
      data: {
        action: 'load_models',
        product_type: productType
      },
      success: function(response) {
        modelSelect.html(response);
        modelSelect.trigger('change');
      }
    });
  });

  // Обработчик выбора модели товара
  modelSelect.on('change', function() {
    var model = $(this).val();

    // Загрузка соответствующих атрибутов для модели товара
    $.ajax({
      url: '/wp-admin/admin-ajax.php',
      type: 'POST',
      data: {
        action: 'load_attributes',
        model: model
      },
      success: function(response) {
        attributesForm.html(response);
      }
    });
  });
});

// Обработчик Ajax-запросов
add_action('wp_ajax_load_models', 'load_models');
add_action('wp_ajax_nopriv_load_models', 'load_models');
function load_models() {
  $productType = $_POST['product_type'];

  // Получение моделей товаров для выбранного типа товара
  $models = get_terms(array(
    'taxonomy' => 'model',
    'hide_empty' => false,
    'meta_query' => array(
      array(
        'key' => 'product_type',
        'value' => $productType,
        'compare' => '='
      )
    )
  ));

  // Вывод HTML-кода для выбора модели товара
  $html = '';
  foreach ($models as $model) {
    $html .= '<option value="' . $model->slug . '">' . $model->name . '</option>';
  }
  wp_send_json($html);
}

add_action('wp_ajax_load_attributes', 'load_attributes');
add_action('wp_ajax_nopriv_load_attributes', 'load_attributes');
function load_attributes() {
  $model = $_POST['model'];

  // Получение полей атрибутов для выбранной модели товара
  $attributes = wc_get_attribute_taxonomies();

  // Вывод HTML-кода для заполнения значений атрибутов
  $html = '';
  foreach ($attributes as $attribute) {
    $html .= '<div class="form-group">';
    $html .= '<label for="' . $attribute->attribute_name . '">' . $attribute->attribute_label . '</label>';
    $html .= '<input type="text" name="' . $attribute->attribute_name . '" id="' . $attribute->attribute_name . '" class="form-control



javascript
Copy code
// Получение данных о моделях товаров в зависимости от выбранного типа товара
function get_models_by_product_type( product_type_id ) {
  jQuery.ajax({
    url: '/wp-json/products/v1/models-by-product-type/' + product_type_id,
    type: 'GET',
    dataType: 'json',
    success: function( data ) {
      // Вывод списка моделей товаров
      var models_select = jQuery('#models-select');
      models_select.empty();
      jQuery.each(data, function(index, value) {
        models_select.append('<option value="' + value.id + '">' + value.name + '</option>');
      });
      // Обновление списка атрибутов товаров при выборе модели
      models_select.on('change', function() {
        var model_id = jQuery(this).val();
        update_product_attributes( model_id );
      });
    }
  });
}

// Получение данных об атрибутах товаров в зависимости от выбранной модели
function update_product_attributes( model_id ) {
  jQuery.ajax({
    url: '/wp-json/products/v1/attributes-by-model/' + model_id,
    type: 'GET',
    dataType: 'json',
    success: function( data ) {
      // Вывод полей атрибутов товаров
      var attributes_form = jQuery('#attributes-form');
      attributes_form.empty();
      jQuery.each(data, function(index, value) {
        attributes_form.append('<div class="attribute-field"><label>' + value.label + '</label><input type="' + value.type + '" name="' + value.name + '"></div>');
      });
    }
  });
}

// Обработка выбора типа товара
jQuery('#product-type-select').on('change', function() {
  var product_type_id = jQuery(this).val();
  get_models_by_product_type( product_type_id );
});
Этот код использует AJAX-запросы для получения данных о моделях товаров и их атрибутах. Когда пользователь выбирает тип товара, функция get_models_by_product_type() получает список моделей, связанных с этим типом товара, и выводит их в форме. Когда пользователь выбирает модель, функция update_product_attributes() получает список атрибутов, связанных с этой моделью, и выводит их поля для заполнения в форме.

Таким образом, пользователь может динамически выбирать тип товара, модель и заполнять соответствующие атрибуты. Данные могут быть сохранены в базе данных и отправлены через REST API, как было описано в предыдущем примере кода.